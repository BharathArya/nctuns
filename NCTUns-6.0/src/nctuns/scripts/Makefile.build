# ==========================================================================
# Building
# ==========================================================================

src := $(obj)

PHONY := __build
__build:

# Read .config if it exist, otherwise ignore
-include .config

include scripts/Nbuild.include

# The filename Nbuild has precedence over Makefile
nbuild-dir := $(if $(filter /%,$(src)),$(src),$(srctree)/$(src))
include $(if $(wildcard $(nbuild-dir)/Nbuild), $(nbuild-dir)/Nbuild, $(nbuild-dir)/Makefile)

include scripts/Makefile.lib

# Do not include host rules unles needed
ifneq ($(hostprogs),)
include scripts/Makefile.host
endif

ifndef obj
$(warning nbuild: Makefile.build is included improperly)
endif

# ===========================================================================

ifneq ($(strip $(lib-y) $(lib-n) $(lib-)),)
  ifeq ($(lib-name),)
    lib-name	:= lib.so
  endif
  lib-target := $(obj)/$(lib-name)
endif

ifneq ($(strip $(obj-y) $(obj-n) $(obj-)),)
builtin-target := $(obj)/built-in.o
endif

# We keep a list of all modules in $(MODVERDIR)

__build: $(builtin-target) $(lib-target) $(subdir-y) $(always)
	@:

# Compile C sources (.c)
# ---------------------------------------------------------------------------

# Default is built-in, unless we know otherwise
quiet_modtag := $(empty)   $(empty)

quiet_cmd_cc_s_c = CC $(quiet_modtag)  $@
cmd_cc_s_c       = $(CC) $(c_flags) -fverbose-asm -S -o $@ $<

%.s: %.c FORCE
	$(call if_changed_dep,cc_s_c)

quiet_cmd_cc_i_c = CPP $(quiet_modtag) $@
cmd_cc_i_c       = $(CPP) $(c_flags)   -o $@ $<

%.i: %.c FORCE
	$(call if_changed_dep,cc_i_c)

quiet_cmd_cc_o_c = CC $(quiet_modtag)  $@
cmd_cc_o_c       = $(CC) $(c_flags) -c -o $@ $<

# Built-in and composite module parts

%.o: %.c FORCE
	$(call if_changed_dep,cc_o_c)

# Compile C sources (.cc, .cpp, .C)
# ---------------------------------------------------------------------------

quiet_cmd_cxx_s_cc = CXX $(quiet_modtag) $@
cmd_cxx_s_cc       = $(CXX) $(cxx_flags) -fverbose-asm -S -o $@ $<

%.s: %.cc FORCE
	$(call if_changed_dep,cxx_s_cc)

%.s: %.cpp FORCE
	$(call if_changed_dep,cxx_s_cc)

%.s: %.C FORCE
	$(call if_changed_dep,cxx_s_cc)

%.i: %.cc FORCE
	$(call if_changed_dep,cc_i_c)

%.i: %.cpp FORCE
	$(call if_changed_dep,cc_i_c)

%.i: %.C FORCE
	$(call if_changed_dep,cc_i_c)

quiet_cmd_cxx_o_cc = CXX $(quiet_modtag) $@
cmd_cxx_o_cc       = $(CXX) $(cxx_flags) -c -o $@ $<

%.o: %.cc FORCE
	$(call if_changed_dep,cxx_o_cc)

%.o: %.cpp FORCE
	$(call if_changed_dep,cxx_o_cc)

%.o: %.C FORCE
	$(call if_changed_dep,cxx_o_cc)

targets += $(real-objs-y) $(lib-y)
targets += $(MAKECMDGOALS) $(always)

# Build the compiled-in targets
# ---------------------------------------------------------------------------

# To build objects in subdirs, we need to descend into the directories
$(sort $(subdir-obj-y)): $(subdir-y) ;

#
# Rule to compile a set of .o files into one .o file
#
ifdef builtin-target
quiet_cmd_link_o_target = LD      $@
# If the list of objects to link is empty, just create an empty built-in.o
cmd_link_o_target = $(if $(strip $(obj-y)),\
		      $(LD) $(ld_flags) -r -o $@ $(filter $(obj-y), $^),\
		      rm -f $@; $(AR) rcs $@)

$(builtin-target): $(obj-y) FORCE
	$(call if_changed,link_o_target)

targets += $(builtin-target)
endif # builtin-target

#
# Rule to compile a set of .o files into one .a file
#
ifdef lib-target
quiet_cmd_link_l_target = LIB     $@
cmd_link_l_target = rm -f $@; $(CXX) $(cxx_flags) -fpic -shared -o $@ $(lib-y)

$(lib-target): $(lib-y) FORCE
	$(call if_changed,link_l_target)

targets += $(lib-target)
endif

#
# Rule to link composite objects
#
#  Composite objects are specified in nbuild makefile as follows:
#    <composite-object>-objs := <list of .o files>
#  or
#    <composite-object>-y    := <list of .o files>
ifneq ($(obj),.)
  link_multi_deps =                     \
  $(filter $(addprefix $(obj)/,         \
  $($(subst $(obj)/,,$(@:.o=-objs)))    \
  $($(subst $(obj)/,,$(@:.o=-y)))), $^)
else
  link_multi_deps = $(filter-out FORCE, $^)
endif
 
quiet_cmd_link_multi-y = LD      $@ $(link_multi_deps)
cmd_link_multi-y = $(LD) $(ld_flags) -r -o $@ $(link_multi_deps)

# We would rather have a list of rules like
# 	foo.o: $(foo-objs)
# but that's not so easy, so we rather make all composite objects depend
# on the set of all their parts
$(multi-used-y) : %.o: $(multi-objs-y) FORCE
	$(call if_changed,link_multi-y)

targets += $(multi-used-y)


# Descending
# ---------------------------------------------------------------------------

PHONY += $(subdir-y)
$(subdir-y):
	$(Q)$(MAKE) $(build)=$@

# Add FORCE to the prequisites of a target to force it to be always rebuilt.
# ---------------------------------------------------------------------------

PHONY += FORCE

FORCE:

# Read all saved command lines and dependencies for the $(targets) we
# may be building above, using $(if_changed{,_dep}). As an
# optimization, we don't need to read them if the target does not
# exist, we will rebuild anyway in that case.

targets := $(wildcard $(sort $(targets)))
cmd_files := $(wildcard $(foreach f,$(targets),$(dir $(f)).$(notdir $(f)).cmd))

ifneq ($(cmd_files),)
  include $(cmd_files)
endif


# Declare the contents of the .PHONY variable as phony.  We keep that
# information in a variable se we can use it in if_changed and friends.

.PHONY: $(PHONY)
