# ==========================================================================
# Building
# ==========================================================================

src := $(obj)

PHONY := __build
__build:

include $(script_dir)Makefile.include

ifneq ("$(src)", "")
  TARGET :=

  # The filename Nbuild has precedence over Makefile
  nbuild-dir := $(if $(filter /%,$(src)),$(src),$(srctree)/$(src))
  include $(if $(wildcard $(nbuild-dir)/Nbuild), $(nbuild-dir)/Nbuild, $(nbuild-dir)/Makefile)

  ifndef obj
  $(warning nbuild: Makefile.build is included improperly)
  endif
endif

include $(script_dir)Makefile.lib

# Do not include host rules unles needed
ifneq ($(hostprogs),)
include $(script_dir)Makefile.host
endif

# ===========================================================================

# We keep a list of all modules in $(MODVERDIR)

__build: $(always) $(TARGET)
	@:

# Compile C sources (.c)
# ---------------------------------------------------------------------------

# Default is built-in, unless we know otherwise
quiet_modtag := $(empty)   $(empty)

quiet_cmd_cc_s_c = CC $(quiet_modtag)  $@
cmd_cc_s_c       = $(CC) $(c_flags) -fverbose-asm -S -o $@ $<

%.s: %.c FORCE
	$(call if_changed_dep,cc_s_c)

quiet_cmd_cc_i_c = CPP $(quiet_modtag) $@
cmd_cc_i_c       = $(CPP) $(c_flags)   -o $@ $<

%.i: %.c FORCE
	$(call if_changed_dep,cc_i_c)

quiet_cmd_cc_o_c = CC $(quiet_modtag)  $@
cmd_cc_o_c       = $(CC) $(c_flags) -c -o $@ $<

# Built-in and composite module parts

%.o: %.c FORCE
	$(call if_changed_dep,cc_o_c)

# Compile C sources (.cc, .cpp, .C)
# ---------------------------------------------------------------------------

quiet_cmd_cxx_s_cc = CXX $(quiet_modtag) $@
cmd_cxx_s_cc       = $(CXX) $(cxx_flags) -fverbose-asm -S -o $@ $<

%.s: %.cc FORCE
	$(call if_changed_dep,cxx_s_cc)

%.s: %.cpp FORCE
	$(call if_changed_dep,cxx_s_cc)

%.s: %.C FORCE
	$(call if_changed_dep,cxx_s_cc)

%.i: %.cc FORCE
	$(call if_changed_dep,cc_i_c)

%.i: %.cpp FORCE
	$(call if_changed_dep,cc_i_c)

%.i: %.C FORCE
	$(call if_changed_dep,cc_i_c)

quiet_cmd_cxx_o_cc = CXX $(quiet_modtag) $@
cmd_cxx_o_cc       = $(CXX) $(cxx_flags) -c -o $@ $<

%.o: %.cc FORCE
	$(call if_changed_dep,cxx_o_cc)

%.o: %.cpp FORCE
	$(call if_changed_dep,cxx_o_cc)

%.o: %.C FORCE
	$(call if_changed_dep,cxx_o_cc)

targets += $(MAKECMDGOALS) $(always)

# Build the compiled-in targets
# ---------------------------------------------------------------------------

#
# Rule to compile a set of .o files into one .o file
#

#
# Rule to link composite objects
#
#  Composite objects are specified in nbuild makefile as follows:
#    <composite-object>-objs := <list of .o files>
#  or
#    <composite-object>-y    := <list of .o files>
link_multi_objs = $(strip $($(@:=-objs)) $($(@:=-y)))
link_multi_deps = $(if $(link_multi_objs), $(link_multi_objs), $(@:=.o))

#quiet_cmd_link_multi-y = LD      $@ $(link_multi_deps)
#cmd_link_multi-y = $(LD) $(ld_flags) -r -o $@ $(link_multi_deps)
quiet_cmd_link_multi-gcc = LINK    $@ $(link_multi_deps)
quiet_cmd_link_multi-g++ = LINK    $@ $(link_multi_deps)
cmd_link_multi-gcc = $(CC) $(CFLAGS) $(EXTRA_CFLAGS) $(CFLAGS_$(@)) $(LDLIBS) -o $@ $(link_multi_deps) $(SHARE_OBJS)
cmd_link_multi-g++ = $(CXX) $(CXXFLAGS) $(EXTRA_CXXFLAGS) $(CXXFLAGS_$(@)) $(LDLIBS) -o $@ $(link_multi_deps) $(SHARE_OBJS)

# We would rather have a list of rules like
# 	foo.o: $(foo-objs)
# but that's not so easy, so we rather make all composite objects depend
# on the set of all their parts
 
ifneq ("$(TARGET)", "")
  $(shell $(script_dir)basic/multi-target.sh $(TARGET) > .target)
  -include .target
endif

$(TARGET): %: $(SHARE_OBJS) FORCE
ifeq ("$(CXXLINK)", "1")
	$(call if_changed,link_multi-g++)
else
	$(call if_changed,link_multi-gcc)
endif

targets += $(TARGET) $(obj-y)

PHONY += FORCE

FORCE:

# Read all saved command lines and dependencies for the $(targets) we
# may be building above, using $(if_changed{,_dep}). As an
# optimization, we don't need to read them if the target does not
# exist, we will rebuild anyway in that case.

targets := $(wildcard $(sort $(targets)))
cmd_files := $(wildcard $(foreach f,$(targets),$(dir $(f)).$(notdir $(f)).cmd))

ifneq ($(cmd_files),)
  include $(cmd_files)
endif

# Declare the contents of the .PHONY variable as phony.  We keep that
# information in a variable se we can use it in if_changed and friends.

.PHONY: $(PHONY)
