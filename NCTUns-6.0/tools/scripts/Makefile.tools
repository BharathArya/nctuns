NAME=Yan-Shiun Tzeng

# *DOCUMENTATION*
# To see a list of typical targets execute "make help"

# Do not print "Entering directory ..."
MAKEFLAGS += --no-print-directory

# We are using a recursive build, so we need to do a little thinking
# to get the ordering right.
#
# Most importantly: sub-Makefiles should only ever modify files in
# their own directory. If in some directory we have a dependency on
# a file in another dir (which doesn't happen often, but it's often
# unavoidable when linking the built-in.o targets which finally
# turn into nctuns), we will call a sub make in that other dir, and
# after that we are sure that everything which is in that other dir
# is now up to date.
#
# The only cases where we need to modify files which have global
# effects are thus separated out and done before the recursive
# descending is started. They are now explicitly listed as the
# prepare rule.

# To put more focus on warnings, be less verbose as default
# Use 'make V=1' to see the full commands

ifdef V
  ifeq ("$(origin V)", "command line")
    NBUILD_VERBOSE = $(V)
  endif
endif
ifndef NBUILD_VERBOSE
  NBUILD_VERBOSE = 0
endif

# Don't care compiler command has be changed
# Use 'make D_CMD=1' to skip checking arguments has same arguments.

ifdef D_CMD
  ifeq ("$(origin D_CMD)", "command line")
    NBUILD_NOCMDDEP = $(V)
  endif
endif
ifndef NBUILD_NOCMDDEP
  NBUILD_NOCMDDEP = 0
endif

ifeq ($(MAKECMDGOALS),clean)
  skip-makefile := 1
endif

# That's our default target when none is given on the command line
PHONY := _all
_all: all

srctree         := $(CURDIR)
src             := $(srctree)
TOPDIR          := $(srctree)
VPATH           := $(srctree)

NCTUNS_TOOLS	?= /usr/local/nctuns/tools
O_DIR		:= $(NCTUNS_TOOLS)

# find the scripts folder
script_dir	:= $(dir $(abspath $(filter %/Makefile.tools,$(MAKEFILE_LIST))))

export srctree VPATH TOPDIR script_dir

# SHELL used by nbuild
CONFIG_SHELL := $(shell if [ -x "$$BASH" ]; then echo $$BASH; \
          else if [ -x /bin/bash ]; then echo /bin/bash; \
          else echo sh; fi ; fi)

# Beautify output
# ---------------------------------------------------------------------------
#
# Normally, we echo the whole command before executing it. By making
# that echo $($(quiet)$(cmd)), we now have the possibility to set
# $(quiet) to choose other forms of output instead, e.g.
#
#         quiet_cmd_cc_o_c = Compiling $(RELDIR)/$@
#         cmd_cc_o_c       = $(CC) $(c_flags) -c -o $@ $<
#
# If $(quiet) is empty, the whole command will be printed.
# If it is set to "quiet_", only the short version will be printed.
# If it is set to "silent_", nothing wil be printed at all, since
# the variable $(silent_cmd_cc_o_c) doesn't exist.
#
# A simple variant is to prefix commands with $(Q) - that's useful
# for commands that shall be hidden in non-verbose mode.
#
#       $(Q)ln $@ :<
#
# If NBUILD_VERBOSE equals 0 then the above command will be hidden.
# If NBUILD_VERBOSE equals 1 then the above command is displayed.

ifeq ($(NBUILD_VERBOSE),1)
  quiet =
  Q =
else
  quiet=quiet_
  Q = @
endif

# If the user is running make -s (silent mode), suppress echoing of
# commands

ifneq ($(findstring s,$(MAKEFLAGS)),)
  quiet=silent_
endif

export quiet Q NBUILD_VERBOSE NBUILD_NOCMDDEP

# We need some generic definitions
include  $(script_dir)Makefile.include

ifeq ($(skip-makefile),)

# Make variables (CC, etc...)
CC              := gcc
CPP             := $(CC) -E
CXX             := g++
STRIP           := strip

NCTUNSINCLUDE   := -I$(script_dir)../../include

CPPFLAGS        += $(NCTUNSINCLUDE)
CFLAGS          += -Wall
CXXFLAGS        += -Wall

ifdef DEBUG_INFO
CFLAGS		+= -g
CXXFLAGS	+= -g
endif

export LD CC STRIP NCTUNSINCLUDE CPPFLAGS CFLAGS CXXFLAGS

# Make variables for host tools which be used during compiling NCTUns engine
HOSTCC          := gcc
HOSTCXX         := g++
HOSTCFLAGS      = -Wall -Wstrict-prototypes -O2 -fomit-frame-pointer
HOSTCXXFLAGS    = -O2

export HOSTCC HOSTCXX HOSTCFLAGS HOSTCXXFLAGS

# Basic helpers built in scripts/
PHONY += scripts_basic
scripts_basic:
	$(Q)$(MAKE) $(build)=$(script_dir)basic

PHONY += prepare scripts FORCE
all: prepare scripts FORCE $(TARGET)

# To ready all script which will be used durtion compiling engine
scripts: scripts_basic

prepare:

include $(script_dir)Makefile.build

endif	#skip-makefile

###
# Cleaning is done on three levels.
# make clean     Delete most generated files

CLEAN_FILES += $(TARGET)

# clean - Delete most, but leave enough to build external modules
#
clean: rm-files := $(CLEAN_FILES)

PHONY += clean
clean:
	$(call cmd,rmfiles)
	$(call cmd,findfiles)

# distclean - Delete all generated files, including autoconf.h
#
distclean-dirs		:= $(addprefix _distclean_,$(script_dir)basic)

PHONY += $(distclean-dirs) distclean
$(distclean-dirs):
	$(Q)$(MAKE) $(clean)=$(patsubst _distclean_%,%,$@)

distclean: clean $(distclean-dirs)
	$(call cmd,rmfiles)


# FIXME Should go into a make.lib or something 
# ===========================================================================

quiet_cmd_rmdirs = $(if $(wildcard $(rm-dirs)),CLEAN   $(wildcard $(rm-dirs)))
      cmd_rmdirs = rm -rf $(rm-dirs)

quiet_cmd_rmfiles = $(if $(wildcard $(rm-files)),CLEAN   $(wildcard $(rm-files)))
      cmd_rmfiles = rm -f $(rm-files)

quiet_cmd_findfiles = CLEAN   $(srctree)
      cmd_findfiles = find . \
	 	\( -name '*.[ois]' -o -name '.*.cmd' \
		-o -name '.target' -o -name '.*.d' \) \
		-type f -print | xargs rm -f

# read all saved command lines

# Shorthand for $(Q)$(MAKE) -f scripts/Makefile.clean obj=dir
# Usage:
# $(Q)$(MAKE) $(clean)=dir
clean := -f $(script_dir)Makefile.clean obj

# other install operation
link ln: $(TARGET)
	@$(foreach f,$(TARGET),ln -sf '$(CURDIR)/$(f)' '$(O_DIR)';)

install: $(TARGET)
	@$(foreach f,$(TARGET),install -m 755 '$(f)' '$(O_DIR)';)

PHONY += FORCE
FORCE:

# include Makefile.help, this file exists in the same folder with Makefile.tools
PHONY += help
include $(script_dir)Makefile.help

# Declare the contents of the .PHONY variable as phony.  We keep that
# information in a variable se we can use it in if_changed and friends.
.PHONY: $(PHONY)
